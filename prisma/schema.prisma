// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  password String
  enabled  Boolean @default(false)
  role     ROLE    @default(USER)
}

enum ROLE {
  ADMIN
  USER
}

model Project {
  id                 String   @id @default(uuid())
  name               String
  industry           String
  studio             String
  features           String[]
  devAmount          Int
  maxBudget          Float
  endDate            DateTime
  startDate          DateTime
  client             Client   @relation(fields: [clientId], references: [id])
  state              STATE    @default(TEAM_ASSIGNMENT)
  clientId           String
  pm                 PM?       @relation(fields: [pmId], references: [id])
  pmId               String?   @unique
  devs               Developer[]
  underSelection     UnderSelectionDeveloper[]
  requirement        String
  pmAssignDate       DateTime?
  firstDevAssignDate DateTime?
  lastDevAssignDate  DateTime?
  creationDate       DateTime @default(now())
  pmDelayPass        Boolean?
  pmDelayCancel      Boolean?
  sentCount          Int @default(0)
  cancelDate         DateTime?
  acceptDate         DateTime?
  sentDates          DateTime[]
  rejectDates        DateTime[]
}

enum STATE {
  TEAM_ASSIGNMENT
  CANCELLED
  ACCEPTED
  TEAM_ASSIGNED
  SENT_TO_CLIENT
  REJECTED_BY_CLIENT
}

model Client {
  id            String    @id @default(uuid())
  name          String
  Project       Project[]
  cuit          Int
  location      String
  industry      String
  pastProjects  String[]
  email         String
  phone         String
}

model Employee {
  id                        String  @id @default(uuid())
  name                      String
  surname                   String
  phone                     String
  salary                    Float
  availableDate             DateTime
  location                  String
  developer                 Developer?
  pm                        PM?
  underSelectionDeveloper   UnderSelectionDeveloper?
  type                      EMPLOYEE_TYPE
  seniority                 Int
  career                    String
}

model PM {
  id            String  @id @default(uuid())
  employee      Employee  @relation(fields: [employeeId], references: [id])
  employeeId    String  @unique
  features      String[]
  project       Project?
  projectCount  Int
}

model Developer {
  id            String  @id @default(uuid())
  employee      Employee  @relation(fields: [employeeId], references: [id])
  employeeId    String  @unique
  technologies  String[]
  project       Project? @relation(fields: [projectId], references: [id])
  projectId     String?
  certificates  String[]
}

model UnderSelectionDeveloper {
  id            String  @id @default(uuid())
  employee      Employee  @relation(fields: [employeeId], references: [id])
  employeeId    String  @unique
  selectionEnd  DateTime
  technologies  String[]
  project       Project? @relation(fields: [projectId], references: [id])
  projectId     String?
  currentJob    String
  selectionStep String
}

enum EMPLOYEE_TYPE {
  PM
  DEV
  UNDER_SELECTION
}